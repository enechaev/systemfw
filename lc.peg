# typed lambda calculus

%prefix "lc"
%value "union lt"
%auxil "struct ctx *"
%header {
    #include "context.h" 
    #include "lambda.h" 
    #include "type.h"
    #include "kind.h"
    #include "debruijn.h"
    #include "eval.h"
    #include "infertype.h"
    #include "inferkind.h"

    struct ctx {
        struct debruijn db;
        struct debruijn type_db;
        struct context ctx;
    };

    union lt {
        struct lambda *l;
        struct type *t;
        struct kind *k;
        char *s;
    };

    struct ctx ctx_init();
    void ctx_destroy(struct ctx *);
}
%source {
    //#ifndef PCC_ERROR
    #define PCC_ERROR(auxil) pcc_error(auxil)
    static void pcc_error(struct ctx *auxil) {
        fprintf(stderr, "Syntax error\n");
        if(auxil) ctx_destroy(auxil);
        exit(1);
    }
    //#endif /* PCC_ERROR */
    struct ctx ctx_init() {
        struct ctx c;
        c.db=debruijn_init();
        c.type_db=debruijn_init();
        c.ctx=context_init();
        return c;
    }
    void ctx_destroy(struct ctx *c) {
        debruijn_destroy(c->db);
        debruijn_destroy(c->type_db);
        context_destroy(c->ctx);
    }
    struct kind *implicit_kind(union lt L, struct ctx *auxil) {
        if (L.k) return L.k;
        else {
            struct kind *k=mkkind(KIND_PROP,0);
            if (!k) PCC_ERROR(auxil);
            return k;
        }
    }
}

#main
main        <- S:sentence {/*$$=S;*/} (SEP S:sentence {/*$$=S;*/})* SEP?
sentence    <- ID:ID EQUAL T:term {context_addterm(&auxil->ctx,ID.s,NULL,T.l);}
             / ID:ID EQUAL OF T:tterm {context_addterm(&auxil->ctx,ID.s,T.t,NULL);}
             / _ '?' EQUAL T:term {struct type *t; struct lambda *l;
                                   printf("expr:"); printnode(T.l); putchar('\n');
                                   printf(" type:"); printtype(t=infertype(T.l,&auxil->ctx)); putchar('\n');
                                   printf(" eval:"); printnode(l=eval(T.l,&auxil->ctx)); putchar('\n');
                                   destroynode(l); destroytype(t);/*$$=T;*/}
             / OF ID:ID EQUAL T:tterm {context_addtype(&auxil->ctx,ID.s,T.t,NULL);}
             / OF '?' _ EQUAL T:tterm {struct kind *k; struct type *t;
                                       printf("type:"); printtype(T.t); putchar('\n');
                                       printf("kind:"); printkind(k=inferkind(T.t,&auxil->ctx)); putchar('\n');
                                       destroykind(k); destroytype(T.t);}
#term
term        <- (T:application / T:abstraction) {$$=T;}
abstraction <- LAMBDA ID:ID OF TID:tterm {if (indexof(&auxil->db,ID.s) || context_findterm(&auxil->ctx,ID.s)) PCC_ERROR(auxil); debruijn_push(&auxil->db,ID.s);}
                            DOT T:term {
                                        debruijn_pop(&auxil->db);
                                        $$.l=(struct lambda *)malloc(sizeof(struct lambda));
                                        if (!$$.l) PCC_ERROR(auxil);
                                        $$.l->t=LAMBDA_ABSTR;
                                        $$.l->abstr.v=ID.s;
                                        $$.l->abstr.overtype=false;
                                        $$.l->abstr.type=TID.t;
                                        $$.l->abstr.expr=T.l;
                                      }
             / UCLAMBDA ID:ID (OF K:kind)? {if (indexof(&auxil->type_db,ID.s) || context_findtype(&auxil->ctx,ID.s)) PCC_ERROR(auxil); debruijn_push(&auxil->type_db,ID.s);}
                               DOT T:term {
                                            debruijn_pop(&auxil->type_db);
                                            $$.l=(struct lambda *)malloc(sizeof(struct lambda));
                                            if (!$$.l) PCC_ERROR(auxil);
                                            $$.l->t=LAMBDA_ABSTR;
                                            $$.l->abstr.v=ID.s;
                                            $$.l->abstr.overtype=true;
                                            $$.l->abstr.kind=implicit_kind(K,auxil);
                                            $$.l->abstr.expr=T.l;
                                          }
application <- S:application {
                                 $$.l=(struct lambda *)malloc(sizeof(struct lambda));
                                 if (!$$.l) PCC_ERROR(auxil);
                                 $$.l->t=LAMBDA_APPL;
                                 $$.l->appl.lhs=S.l;
                             } (T:atom {$$.l->appl.overtype=false; $$.l->appl.rhs.l=T.l;}
                               / LB TT:tterm RB {$$.l->appl.overtype=true; $$.l->appl.rhs.t=TT.t;})
             / T: atom {$$=T;}
atom        <- ID:ID {
                        $$.l=(struct lambda *)malloc(sizeof(struct lambda));
                        if (!$$.l) PCC_ERROR(auxil);
                        $$.l->t=LAMBDA_ATOM;
                        $$.l->atom.s=ID.s;
                        $$.l->atom.index=indexof(&auxil->db,ID.s);
                     }
             / LP T:term RP {$$=T;}
#kind
kind        <- TA:katom {$$=TA;} (ARROW S:kind {$$.k=kind_function($$.k,S.k);})?
katom       <- UKIND {$$.k=mkkind(KIND_PROP,0);}
             / LP TT:kind RP {$$=TT;}
#type
tterm       <- (T:tarrow / T:tabstr) {$$=T;}
tarrow      <- (T:tappl {$$=T;}) (ARROW S:tarrow {$$.t=type_function(T.t,S.t);})?
tappl       <- S:tappl T:tatom {$$.t=type_appl(S.t,T.t);}
             / T:tatom {$$=T;}
tabstr      <- LAMBDA ID:ID (OF K:kind)? {if (indexof(&auxil->type_db,ID.s) || context_findtype(&auxil->ctx,ID.s)) PCC_ERROR(auxil); debruijn_push(&auxil->type_db,ID.s);}
                             DOT T:tterm {
                                            debruijn_pop(&auxil->type_db);
                                            $$.t=type_abstr(ID.s,T.t,implicit_kind(K,auxil));
                                         }
tatom       <- ID:ID {
                    $$.t=mktype(TYPE_NAME,ID.s,0);
                    $$.t->index=indexof(&auxil->type_db,ID.s);
                    if (!$$.t) PCC_ERROR(auxil);
                }
             / LP T:tterm RP {$$=T;}
             / FORALL ID:ID (OF K:kind)? {if (indexof(&auxil->type_db,ID.s)) PCC_ERROR(auxil); debruijn_push(&auxil->type_db,ID.s);}
                             DOT T:tterm {
                                            debruijn_pop(&auxil->type_db);
                                            struct type *p=type_poly(ID.s,T.t,implicit_kind(K,auxil));
                                            $$.t=p;
                                         }
#common
ID          <- _ <[A-Za-z0-9_+][A-Za-z0-9_+]*> _ {
                                                $$.s=strdup($1);
                                                if (!$$.s) PCC_ERROR(auxil);
                                              }
UCLAMBDA    <- _ ('/\\' / '\u039b') _
UKIND       <- _ '*' _
FORALL      <- _ ('\\/' / '\u2200') _
SEP         <- _ ';' _
EQUAL       <- _ '=' _
ARROW       <- _ ('->' / '\u2192') _
LAMBDA      <- _ ('\\' / '\u03bb') _
OF          <- _ ':' _
DOT         <- _ '.' _
LP          <- _ '(' _
RP          <- _ ')' _
LB          <- _ '[' _
RB          <- _ ']' _
_           <- [\n\t\r ]*

