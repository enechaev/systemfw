# lambda calculus

%prefix "lc"
%value "struct lambda *"
%auxil "struct ctx *"
%header {
    #include "lambda.h" 
    #include "debruijn.h" 
}
%source {
#ifndef PCC_ERROR
#define PCC_ERROR(auxil) pcc_error(auxil)
static void pcc_error(struct ctx *auxil) {
    fprintf(stderr, "Syntax error\n");
    if(auxil) ctx_destroy(*auxil);
    exit(1);
}
#endif /* PCC_ERROR */
}

term        <- (t:application / t:abstraction) {$$=t;}
abstraction <- LAMBDA ID:ID {if (indexof(auxil,ID->atom.s)) PCC_ERROR(auxil); ctx_push(auxil,ID->atom.s);} 
                            DOT T:term {
                                        ctx_pop(auxil);
                                        $$=(struct lambda *)malloc(sizeof(struct lambda));
                                        if (!$$) PCC_ERROR(auxil);
                                        $$->t=LAMBDA_ABSTR;
                                        $$->abstr.v=ID->atom.s; free(ID);
                                        $$->abstr.expr=T;
                                      }
application <- S:application T:atom {
                                        $$=(struct lambda *)malloc(sizeof(struct lambda));
                                        if (!$$) PCC_ERROR(auxil);
                                        $$->t=LAMBDA_APPL;
                                        $$->appl.lhs=S;
                                        $$->appl.rhs=T;
                                    }
             / T: atom {$$=T;}
atom        <- ID:ID {$$=ID;}
             / LP T:term RP {$$=T;}
ID          <- _ <[A-Za-z_][A-Za-z0-9]*> _ {
                                                $$=(struct lambda *)malloc(sizeof(struct lambda));
                                                if (!$$) PCC_ERROR(auxil);
                                                $$->t=LAMBDA_ATOM;
                                                $$->atom.s=strdup($1);
                                                if (!$$->atom.s) PCC_ERROR(auxil);
                                                $$->atom.index=indexof(auxil,$1);
                                           }
LAMBDA      <- _ '\\' _
DOT         <- _ '.' _
LP          <- _ '(' _
RP          <- _ ')' _
_           <- [\n\t\r ]*

